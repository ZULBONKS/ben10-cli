#!/usr/bin/env python3

from os import system
from random import choice
from sys import argv
from re import search, match

import argparse
import requests
from prettytable import PrettyTable
from bs4 import BeautifulSoup


class Colors:
    # ANSII color codes
    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    CYAN = "\033[0;36m"
    END = "\033[0m"


def getVideos() -> list[str, ...]:
    # Gets the list of all videos urls

    episodes: list[str, ...] = []

    # website uses ajax to dynamicly load the episodeds, making it impossible to load everythign with one url
    # temporary fix for now
    for link in links[:3]:
        response = requests.get(link)
        soup = BeautifulSoup(response.text, "html.parser")

        for data in soup.find_all("div", {"class": "item-thumbnail"}):
            episodes.append(data.find("a", href=True)["href"])  

    return episodes


def listVideos(episodes: list[str, ...]) -> None:
    # Displays episode titles with numbers using PrettyTable

    episodesTitles: list[str, ...] = []
    episodesNumbers: list[int, ...] = [
        f"{Colors.CYAN}{x}{Colors.END}" for x in [x for x in range(len(episodes))]
    ]

    for episode in episodes:
        episodesTitles.append(episode.split("/")[-2].replace("-", " ").title())

    table = PrettyTable()
    table.add_column("Episodes", episodesTitles)
    table.add_column("Number", episodesNumbers)

    print(table)


def videoSource(source: str) -> str:
    # Gets the direct mp4 link

    response: str = requests.get(source).text
    soupRelative = BeautifulSoup(response, "html.parser")

    return soupRelative.find("input", {"name": "main_video_url"})["value"]


def playVideo(episode: str, player: str) -> None:
    # Plays the video
    
    print(f"{Colors.GREEN}Currently playing{Colors.END}: {episode}")
    system(f"{player} {episode}")


def downloadVideo(episode: str, downloader: str) -> None:
    # Downloads the video
    system(f"{downloader} {episode}")


def userInput() -> int:
    # Takes input from user

    try:
        user = int(input("What episode do you want to watch?: "))
    except ValueError:
        print(f"{Colors.RED}You need to input a number{Colors.END}")
        raise SystemExit

    return user


def parseArgs():
    # Parsing arguments

    parser = argparse.ArgumentParser(
        prog="spongebob-cli",
        description="Watch classic spongebob from the terminal!",
    )

    parser.add_argument("-p", "--play", type=int,
        help="play the wanted episode without any user interaction",
    )

    parser.add_argument("-l", "--list", action="store_true", default=False,
        help="list episodes and quit",
    )

    parser.add_argument("-r", "--random", action="store_true", default=False,
        help="play random episode and quit",
    )

    parser.add_argument("-d", "--download", type=int,
        help="download the wanted episode"
    )

    parser.add_argument("-da", "--download-all", action="store_true", default=False,
        help="download all episodes",
    )

    parser.add_argument("-b", "--binge", action="store_true", default=False, 
        help="play every video"
    )

    parser.add_argument("-vp", "--video-player", type=str, default="mpv",
        help="use another video player [default=mpv]",
    )

    parser.add_argument("-vd", "--video-downloader", type=str, default="wget",
        help="use another video downloadr [default=wget]",
    )

    return parser.parse_args()


def main(args) -> None:
    # Main program
    episodesUrls: list[str, ...] = getVideos()

    # if arguments were passed
    if argv[1:] == []:
        # if no arguments were passed run all
        listVideos(episodesUrls)
        video = videoSource(episodesUrls[userInput()])
        playVideo(video, args.video_player)


    else:

        if args.play != None:
            video = videoSource(episodesUrls[args.play])
            playVideo(video, args.video_player)


        elif args.download != None:
            video = videoSource(episodesUrls[args.download])
            downloadVideo(video, args.video_downloader)


        elif args.random:
            video = videoSource(episodesUrls[choice(range(0, len(episodesUrls)))])
            playVideo(video, args.video_player)


        elif args.binge:
            for x in episodesUrls:
                video = videoSource(x)
                playVideo(video, args.video_player)


        elif args.download_all:
            for x in episodesUrls:
                print(
                    f"Episode: {x} downloaded {episodesUrls.index(x)}/{len(episodesUrls)}"
                )
                video = videoSource(x)
                downloadVideo(video, args.video_downloader)
                system("clear")


        elif args.list:
            listVideos(episodesUrls)


if __name__ == "__main__":
    links: list[str] = []
    for num in range(1, 17):
        links.append(f"https://www.megacartoons.net/video-serie/spongebob-squarepants/page/{num}/")

    args = parseArgs()
    main(args)

