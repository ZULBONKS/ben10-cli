#!/usr/bin/env python3
import argparse
import requests
from prettytable import PrettyTable
from bs4 import BeautifulSoup
from os import system
from sys import argv
from random import choice

LINK: str = "https://www.megacartoons.net/help-wanted/"
response: str = requests.get(LINK)

if response.status_code != 200:
    print(f"Error while trying to connect to the website '{response.status_code}'")
    raise SystemExit

soup = BeautifulSoup(response.text, "html.parser")


def getVideos() -> list[str, ...]:
    #Gets the list of all videos urls
    data = soup.find("a", class_="btn btn-sm btn-default series-current")

    episodes: list[str, ...] = []
    for data in soup.find_all("a", class_="btn btn-sm btn-default"):
        episodes.append(data.get("href"))

    return episodes


def listVideos(episodes: list[str, ...]) -> None:
    # Displays episode titles with numbers using PrettyTable
    episodesTitles: list[str, ...] = [] 
    episodesNumbers: list[int, ...] = [x for x in range(len(episodes))]

    for episode in episodes:
        # Should probably be done with regex instead of list splicing
        episodesTitles.append(episode.split("/")[-2].replace("-", " ").title())

    table = PrettyTable()
    table.add_column("Number", episodesNumbers)
    table.add_column("Episodes", episodesTitles)

    print(table)


def videoSource(source: str) -> str:
    # Gets the direct mp4 link
    response: str = requests.get(source).text
    soupRelative = BeautifulSoup(response, "html.parser")

    return soupRelative.find("input", {"name": "main_video_url"})["value"]


def playVideo(episode: str) -> None:
    system(f"mpv {episode}")


def downloadVideo(episode: str) -> None:
    system(f"wget --show-progress {episode}")


def userInput() -> int:
    # Takes input from user
    try:
        user = int(input("What episode do you want to watch?: "))
    except ValueError:
        print("Error")
        raise SystemExit

    return user


def parseArgs():
    # Parsing arguments
    parser = argparse.ArgumentParser(
                prog = 'spongebob-cli',
                description = 'Watch classic spongebob from the terminal!'
            )

    parser.add_argument("-p", "--play", type=int,help="play the wanted episode without any user interaction")
    parser.add_argument("-l", "--list", action="store_true", default=False, help="list episodes and quit")
    parser.add_argument("-r", "--random", action="store_true", default=False, help="play random episode and quit")
    parser.add_argument("-d", "--download", type=int, help="download the wanted episode")
    parser.add_argument("-da", "--download-all", action="store_true", default=False, help="download all episodes")
    parser.add_argument("-b", "--binge", action="store_true", default=False, help="play every video")

    return parser.parse_args()


def main(args) -> None:
    # Main program
    episodesUrls: list[str, ...] = getVideos()

    # if arguments were passed
    if argv[1:] != []:

        if args.play != None:
            video = videoSource(episodesUrls[args.play])
            playVideo(video)

        elif args.download != None:
            video = videoSource(episodesUrls[args.download])
            downloadVideo(video)

        elif args.random:
            video = (videoSource(episodesUrls[choice(range(0, len(episodesUrls)))]))
            playVideo(video)

        elif args.binge:
            for x in episodesUrls:
                video = videoSource(x)
                playVideo(video)

        elif args.download_all:
            for x in episodesUrls:
                print(f"Episode: {x} downloaded {episodesUrls.index(x)}/{len(episodesUrls)}")
                video = videoSource(x)
                downloadVideo(video)
                system("clear")

        elif args.list:
            listVideos(episodesUrls)

        raise SystemExit

    # if no arguments were passed run all
    listVideos(episodesUrls)
    video = (videoSource(episodesUrls[userInput()]))
    playVideo(video)


if __name__ == "__main__":
    args = parseArgs()
    #print(args.type())
    main(args)